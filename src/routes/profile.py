import datetime

import numpy as np
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message, CallbackQuery

from models.app import App
from utils.functions import make_string_good_for_markdown
from utils.structures import UserData


async def send_profile(message: Message, bot: AsyncTeleBot):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —é–∑–µ—Ä–∞
    """

    data = await App().Dao.user.find_by_user_id(message.chat.id)
    user = UserData(**data)
    if App().Tasks.get(user.user_id):
        App().Tasks[user.user_id].cancel()

    today_duration = await App().Dao.user.get_talk_time(message.from_user.id, interval="day", role='user')
    week_duration = await App().Dao.user.get_talk_time(message.from_user.id, interval="week", role='user')
    total_duration = await App().Dao.user.get_talk_time(message.from_user.id, interval="total", role='user')

    total_listeaning = await App().Dao.user.get_talk_time(message.from_user.id, interval="total", role='assistant')

    days_training = await App().Dao.user.get_general_bottle_days(interval='total', user_id=message.from_user.id)
    days_training = list(days_training.items())[0][0]

    voice_duration = total_duration
    voice_duration = 100 if voice_duration > 100 else voice_duration
    voice_duration = round(voice_duration, 2)
    progress = int(voice_duration // 10) + 1
    sprint_line = '‚úÖ' * progress + '‚¨ú' * (9 - progress)

    day2emoji = {'mon': 0, 'tue': 1, 'wen': 2, 'thu': 3, 'fri': 4, 'sat': 5, 'sun': 6}
    week_activity_dict = await App().Dao.user.get_usage_by_weekday(message.from_user.id)
    dayofweek = int(datetime.datetime.today().weekday())

    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–± —É–±—Ä–∞—Ç—å –∏–∑ –Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±—É–¥—É—â–µ–≥–æ
    for k, v in day2emoji.items():
        if v < dayofweek:
            day2emoji[k] = '‚úÖ' if week_activity_dict[k]['talk_time'] > 0 else '‚ùå'
            val = week_activity_dict[k]['talk_time']
            week_activity_dict[k]['talk_time'] = f'{val} –º–∏–Ω'
        elif v == dayofweek:
            day2emoji[k] = '‚úÖ' if week_activity_dict[k]['talk_time'] > 0 else 'ü§î'
            val = week_activity_dict[k]['talk_time']
            week_activity_dict[k]['talk_time'] = f'{val} –º–∏–Ω' if val > 0 else ''
        else:
            week_activity_dict[k]['talk_time'] = ''
            day2emoji[k] = '‚åõ'

    time2emoji = {1: 'ü•â', 5: 'ü•à', 10: 'ü•á', 13: 'üèÖ',
                  15: 'ü¶Ñ', 20: 'üöÄ', 30: 'üèÖ', 50: 'üß†', 75: 'üê≤',
                  100: 'üéñ', 200: 'üë®‚ÄçüöÄ', 300: 'üèÜ', 500: 'üèµ', 1000: 'ü§Ø',
                  }

    today_duration = round(today_duration, 4)

    level_text = ''
    for k, emoji in time2emoji.items():
        if total_duration >= k:
            level_num = int(np.log(total_duration * 10 + 1) + 1)
            level_text = f'–£—Ä–æ–≤–µ–Ω—å {level_num}{emoji}'

    motive_text = ' - –ø–æ–∑–∞–Ω–∏–º–∞–π—Å—è —Å–µ–≥–æ–¥–Ω—è!'
    profile_message = f"""
–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç {f'@{message.from_user.username}' if message.from_user.username != None else ''}

            –í–∞—à–∞ —Ü–µ–ª—å –Ω–∞ –¥–µ–Ω—å: 5 –º–∏–Ω.üéØ 
            üéô –í—ã –Ω–∞–≥–æ–≤–æ—Ä–∏–ª–∏ üöÄ:
            - –°–µ–≥–æ–¥–Ω—è: {today_duration} –º–∏–Ω.
            - –ó–∞ –Ω–µ–¥–µ–ª—é: {week_duration} –º–∏–Ω.
            - –í—Å–µ–≥–æ: {total_duration} –º–∏–Ω. -> {level_text}
            üëÇ –í—ã –Ω–∞—Å–ª—É—à–∞–ª–∏ {int(total_listeaning)} –º–∏–Ω. –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–µ—á–∏
            üí™ –í—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å {days_training} –¥–Ω–µ–π

            –î–æ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {max([5 - today_duration, 0])} –º–∏–Ω.! 

            üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–µ–≥–∏ –º–∞—Ä–∞—Ñ–æ–Ω –ø–æ –≥–æ–≤–æ—Ä–µ–Ω–∏—é!
            {sprint_line} 100 –º–∏–Ω
            {voice_duration} –º–∏–Ω, {round(voice_duration)}%

            üìà –î–Ω–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –æ–±—â–∞–ª—Å—è:
            {day2emoji['mon']} Monday {motive_text if day2emoji['mon'] == 'ü§î' else ''} {week_activity_dict['mon']['talk_time']} 
            {day2emoji['tue']} Tuesday {motive_text if day2emoji['tue'] == 'ü§î' else ''} {week_activity_dict['tue']['talk_time']} 
            {day2emoji['wen']} Wednesday {motive_text if day2emoji['wen'] == 'ü§î' else ''} {week_activity_dict['wen']['talk_time']} 
            {day2emoji['thu']} Thursday {motive_text if day2emoji['thu'] == 'ü§î' else ''} {week_activity_dict['thu']['talk_time']} 
            {day2emoji['fri']} Friday {motive_text if day2emoji['fri'] == 'ü§î' else ''} {week_activity_dict['fri']['talk_time']} 
            {day2emoji['sat']} Saturday {motive_text if day2emoji['sat'] == 'ü§î' else ''} {week_activity_dict['sat']['talk_time']} 
            {day2emoji['sun']} Sunday {motive_text if day2emoji['sun'] == 'ü§î' else ''} {week_activity_dict['sun']['talk_time']} 
            """.replace('            ', '')  # ‚ùå

    escapt_list = ['_', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    profile_message = await make_string_good_for_markdown(profile_message, es_list=escapt_list)

    await bot.send_message(text=profile_message,
                           chat_id=message.chat.id,
                           parse_mode='MarkdownV2')

    return profile_message


async def send_users_profile(message: Message, bot: AsyncTeleBot):
    if message.chat.id not in App()['config']['bot']['administrators']['users']:
        return None

    author = message.chat.id
    user_id = int(message.text.split('@')[1])

    message.chat.id = user_id
    message.from_user.id = user_id

    # data = await App().Dao.user.find_by_user_id(user_id)
    # user = UserData(**data)
    # message.from_user = user

    profile_message = await send_profile(message, bot)
    await bot.send_message(text=profile_message, chat_id=author, parse_mode='MarkdownV2')


async def profile_back(call: CallbackQuery, bot: AsyncTeleBot):
    if App().Tasks.get(call.message.from_user.id):
        App().Tasks[call.message.from_user.id].cancel()

    txt = '–ñ–¥—É —Ç–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è üëá'
    bot_message = await bot.send_message(text=txt, chat_id=call.from_user.id)
